// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file SampleMessage.proto (package huddle01.observer.schema, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2 } from "@bufbuild/protobuf";

/**
 * @generated from message huddle01.observer.schema.SampleMessage
 */
export class SampleMessage extends Message<SampleMessage> {
  /**
   * @generated from field: required string serviceId = 1;
   */
  serviceId?: string;

  /**
   * @generated from field: required string mediaUnitId = 2;
   */
  mediaUnitId?: string;

  /**
   * @generated from field: required string roomId = 3;
   */
  roomId?: string;

  /**
   * @generated from field: required string callId = 4;
   */
  callId?: string;

  /**
   * @generated from field: required string clientId = 5;
   */
  clientId?: string;

  /**
   * @generated from field: required string sampleInBase64 = 6;
   */
  sampleInBase64?: string;

  /**
   * @generated from field: optional string peerId = 7;
   */
  peerId?: string;

  /**
   * used when we replay the samples from a previously saved file
   * in this case we should not save the samples again
   *
   * @generated from field: optional bool replay = 8;
   */
  replay?: boolean;

  /**
   * @generated from field: optional string userId = 9;
   */
  userId?: string;

  /**
   * used to add some metadata by the connection received the sample first
   *
   * @generated from field: optional string connectionMetadata = 10;
   */
  connectionMetadata?: string;

  constructor(data?: PartialMessage<SampleMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "huddle01.observer.schema.SampleMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "serviceId", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 2, name: "mediaUnitId", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 3, name: "roomId", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 4, name: "callId", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 5, name: "clientId", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 6, name: "sampleInBase64", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 7, name: "peerId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "replay", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "connectionMetadata", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SampleMessage {
    return new SampleMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SampleMessage {
    return new SampleMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SampleMessage {
    return new SampleMessage().fromJsonString(jsonString, options);
  }

  static equals(a: SampleMessage | PlainMessage<SampleMessage> | undefined, b: SampleMessage | PlainMessage<SampleMessage> | undefined): boolean {
    return proto2.util.equals(SampleMessage, a, b);
  }
}

